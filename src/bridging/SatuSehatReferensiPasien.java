/*
  Kontribusi dari Mas Abdul Wahid RSUD Cipayung & Mas Fanji dari RSUD Kramatjati 
  
 */

package bridging;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import java.awt.Dimension;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import fungsi.sekuel;
import fungsi.validasi;
import fungsi.akses;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;

/**
 *
 * @author dosen
 */
public final class SatuSehatReferensiPasien extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private validasi Valid=new validasi();
    private sekuel Sequel=new sekuel();
    private int i=0;
    private String link="",json="",birthDate="",province="",provincename="",city="",cityname="",district="",districtname="",village="",villagename="",rt="",rw="",line="",postalCode="",gender="",
                   noktp="",idpasien="",maritalStatus="",name="",phone="",email="";
    private ApiSatuSehat api=new ApiSatuSehat();
    private HttpHeaders headers ;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root;
    private JsonNode response;
    private FileReader dataPropinsi,dataKabupaten,dataKecamatan,dataKelurahan;
        
    /** Creates new form DlgKamar
     * @param parent
     * @param modal */
    public SatuSehatReferensiPasien(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocation(10,2);
        setSize(628,674);

        tabMode=new DefaultTableModel(null,new String[]{"Item","Data"}){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        tbKamar.setModel(tabMode);

        //tbKamar.setDefaultRenderer(Object.class, new WarnaTable(panelJudul.getBackground(),tbKamar.getBackground()));
        tbKamar.setPreferredScrollableViewportSize(new Dimension(500,500));
        tbKamar.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (i = 0; i < 2; i++) {
            TableColumn column = tbKamar.getColumnModel().getColumn(i);
            if(i==0){
                column.setPreferredWidth(140);
            }else if(i==1){
                column.setPreferredWidth(450);
            }
        }
        tbKamar.setDefaultRenderer(Object.class, new WarnaTable());
        
        TCari.setDocument(new batasInput((byte)100).getKata(TCari));
        
        if(koneksiDB.CARICEPAT().equals("aktif")){
            TCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener(){
                @Override
                public void insertUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil(TCari.getText());
                    }
                }
                @Override
                public void removeUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil(TCari.getText());
                    }
                }
                @Override
                public void changedUpdate(DocumentEvent e) {
                    if(TCari.getText().length()>2){
                        tampil(TCari.getText());
                    }
                }
            });
        } 
        
        try {
            link=koneksiDB.URLFHIRSATUSEHAT();
        } catch (Exception e) {
            System.out.println("Notif : "+e);
        }  
        
        try {
            dataPropinsi = new FileReader("./cache/propinsi.iyem");
        } catch (Exception e) {
            System.out.println("Notif : "+e);
        } 
        
        try {
            dataKabupaten = new FileReader("./cache/kabupaten.iyem");
        } catch (Exception e) {
            System.out.println("Notif : "+e);
        } 
        
        try {
            dataKecamatan= new FileReader("./cache/kecamatan.iyem");
        } catch (Exception e) {
            System.out.println("Notif : "+e);
        } 
        
        try {
            dataKelurahan= new FileReader("./cache/kelurahan.iyem");
        } catch (Exception e) {
            System.out.println("Notif : "+e);
        } 
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbKamar = new widget.Table();
        panelGlass6 = new widget.panelisi();
        jLabel16 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        jLabel17 = new widget.Label();
        BtnPrint = new widget.Button();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setIconImages(null);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Pencarian Data Referensi Pasien Satu Sehat ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbKamar.setAutoCreateRowSorter(true);
        tbKamar.setName("tbKamar"); // NOI18N
        Scroll.setViewportView(tbKamar);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        panelGlass6.setName("panelGlass6"); // NOI18N
        panelGlass6.setPreferredSize(new java.awt.Dimension(44, 54));
        panelGlass6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel16.setText("NIK/ID Pasien :");
        jLabel16.setName("jLabel16"); // NOI18N
        jLabel16.setPreferredSize(new java.awt.Dimension(85, 23));
        panelGlass6.add(jLabel16);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(210, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass6.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('6');
        BtnCari.setToolTipText("Alt+6");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass6.add(BtnCari);

        jLabel17.setName("jLabel17"); // NOI18N
        jLabel17.setPreferredSize(new java.awt.Dimension(30, 23));
        panelGlass6.add(jLabel17);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        panelGlass6.add(BtnPrint);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass6.add(BtnKeluar);

        internalFrame1.add(panelGlass6, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            dispose();
        }else{Valid.pindah(evt,BtnPrint,BtnKeluar);}
    }//GEN-LAST:event_BtnKeluarKeyPressed

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
        if(tabMode.getRowCount()==0){
            JOptionPane.showMessageDialog(null,"Maaf, data sudah habis. Tidak ada data yang bisa anda print...!!!!");
            TCari.requestFocus();
        }else if(tabMode.getRowCount()!=0){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Sequel.queryu("truncate table temporary");
            int row=tabMode.getRowCount();
            for(int r=0;r<row;r++){  
                Sequel.menyimpan("temporary","'0','"+
                                tabMode.getValueAt(r,0).toString()+"','"+
                                tabMode.getValueAt(r,1).toString()+"','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''","Rekap Harian Pengadaan Ipsrs"); 
            }
            
            Map<String, Object> param = new HashMap<>();                 
            param.put("namars",akses.getnamars());
            param.put("alamatrs",akses.getalamatrs());
            param.put("kotars",akses.getkabupatenrs());
            param.put("propinsirs",akses.getpropinsirs());
            param.put("kontakrs",akses.getkontakrs());
            param.put("emailrs",akses.getemailrs());   
            param.put("logo",Sequel.cariGambar("select logo from setting")); 
            Valid.MyReport("rptCariSatuSehatPasien.jasper","report","[ Pencarian Referensi Pasien Satu Sehat ]",param);
            this.setCursor(Cursor.getDefaultCursor());
        }        
    }//GEN-LAST:event_BtnPrintActionPerformed

    private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            BtnCariActionPerformed(null);
            BtnPrint.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
            BtnCariActionPerformed(null);
        }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
            BtnKeluar.requestFocus();
        }else if(evt.getKeyCode()==KeyEvent.VK_UP){
            tbKamar.requestFocus();
        }
    }//GEN-LAST:event_TCariKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        if(TCari.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Maaf, Silahkan masukkan NIK/ID parktisi");
        }else{
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            tampil(TCari.getText());
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnCariActionPerformed(null);
        }else{
            Valid.pindah(evt,TCari,BtnPrint);
        }
    }//GEN-LAST:event_BtnCariKeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            SatuSehatReferensiPasien dialog = new SatuSehatReferensiPasien(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCari;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.ScrollPane Scroll;
    private widget.TextBox TCari;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel16;
    private widget.Label jLabel17;
    private widget.panelisi panelGlass6;
    private widget.Table tbKamar;
    // End of variables declaration//GEN-END:variables
    private void tampil(String search) {
        Valid.tabelKosong(tabMode);
        try{
            birthDate="";province="";provincename="";city="";cityname="";district="";districtname="";village="";villagename="";
            rt="";rw="";line="";postalCode="";gender="";noktp="";idpasien="";maritalStatus="";name="";phone="";email="";
            headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.add("Authorization", "Bearer "+api.TokenSatuSehat());
            requestEntity = new HttpEntity(headers);
            System.out.println("Notifikasi : "+link+"/Patient?identifier=https://fhir.kemkes.go.id/id/nik|"+search);
            json=api.getRest().exchange(link+"/Patient?identifier=https://fhir.kemkes.go.id/id/nik|"+search, HttpMethod.GET, requestEntity, String.class).getBody();
            System.out.println("JSON : "+json);
            root = mapper.readTree(json);
            for(JsonNode list:root.path("entry")){
                idpasien=list.path("resource").path("id").asText();
                noktp=search;
                try{
                    headers = new HttpHeaders();
                    headers.setContentType(MediaType.APPLICATION_JSON);
                    headers.add("Authorization", "Bearer "+api.TokenSatuSehat());
                    requestEntity = new HttpEntity(headers);
                    System.out.println("Notifikasi : "+link+"/Patient/"+idpasien);
                    json=api.getRest().exchange(link+"/Patient/"+idpasien, HttpMethod.GET, requestEntity, String.class).getBody();
                    System.out.println("JSON : "+json);
                    root = mapper.readTree(json);
                    gender = root.path("gender").asText().toLowerCase().equals("male")?"Laki-laki":"Perempuan";
                    birthDate = root.path("birthDate").asText();
                    maritalStatus = root.path("maritalStatus").path("text").asText().toLowerCase().equals("married")?"Menikah":"Belum Menikah";
                    for(JsonNode listname:root.path("name")){
                        name=listname.path("text").asText();
                    }
                    for(JsonNode listtelecom:root.path("telecom")){
                        if(listtelecom.path("system").asText().equals("phone")){
                            phone=listtelecom.path("value").asText();
                        }else if(listtelecom.path("system").asText().equals("email")){
                            email=listtelecom.path("value").asText();
                        }
                    }
                    for(JsonNode listaddress:root.path("address")){
                        line=listaddress.path("line").get(0).asText();
                        postalCode=listaddress.path("postalCode").asText();
                        for(JsonNode listextension:listaddress.path("extension")){
                            for(JsonNode listextensionextension:listextension.path("extension")){
                                if(listextensionextension.path("url").asText().equals("province")){
                                    province=listextensionextension.path("valueCode").asText();
                                }else if(listextensionextension.path("url").asText().equals("city")){
                                    city=listextensionextension.path("valueCode").asText();
                                }else if(listextensionextension.path("url").asText().equals("district")){
                                    district=listextensionextension.path("valueCode").asText();
                                }else if(listextensionextension.path("url").asText().equals("village")){
                                    village=listextensionextension.path("valueCode").asText();
                                }else if(listextensionextension.path("url").asText().equals("rt")){
                                    rt=listextensionextension.path("valueCode").asText();
                                }else if(listextensionextension.path("url").asText().equals("rw")){
                                    rw=listextensionextension.path("valueCode").asText();
                                }
                            }
                        }
                    }
                }catch(Exception e){
                    System.out.println("Notifikasi : "+e);
                }
                tabMode.addRow(new String[]{
                    "ID Pasien",": "+idpasien
                });
                tabMode.addRow(new String[]{
                    "Nomor KTP",": "+noktp
                });
                tabMode.addRow(new String[]{
                    "Nama",": "+name
                });
                tabMode.addRow(new String[]{
                    "Tanggal Lahir",": "+birthDate
                });
                tabMode.addRow(new String[]{
                    "Jenis Kelamin",": "+gender
                });
                tabMode.addRow(new String[]{
                    "Status Pernikahan",": "+maritalStatus
                });
                tabMode.addRow(new String[]{
                    "Alamat Rumah",": "+line
                });
                tabMode.addRow(new String[]{
                    "R.T.",": "+rt
                });
                tabMode.addRow(new String[]{
                    "R.W.",": "+rw
                });
                response = mapper.readTree(dataKelurahan).path("kelurahan");
                for(JsonNode listkelurahan:response){
                    if(listkelurahan.path("id").asText().toLowerCase().equals(village)&&listkelurahan.path("id_kecamatan").asText().equals(district)){
                        villagename=listkelurahan.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kelurahan",": "+village+" "+villagename
                });
                response = mapper.readTree(dataKecamatan).path("kecamatan");
                for(JsonNode listkcamatan:response){
                    if(listkcamatan.path("id").asText().toLowerCase().equals(district)&&listkcamatan.path("id_kabupaten").asText().equals(city)){
                        districtname=listkcamatan.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kecamatan",": "+district+" "+districtname
                });
                response = mapper.readTree(dataKabupaten).path("kabupaten");
                for(JsonNode listkabupaten:response){
                    if(listkabupaten.path("id").asText().toLowerCase().equals(city)&&listkabupaten.path("id_propinsi").asText().equals(province)){
                        cityname=listkabupaten.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kabupaten",": "+city+" "+cityname
                });
                response = mapper.readTree(dataPropinsi).path("propinsi");
                for(JsonNode listpropinsi:response){
                    if(listpropinsi.path("id").asText().toLowerCase().equals(province)){
                        provincename=listpropinsi.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Propinsi",": "+province+" "+provincename
                });
                tabMode.addRow(new String[]{
                    "Kode P.O.S.",": "+postalCode
                });
                tabMode.addRow(new String[]{
                    "Nomor HP",": "+phone
                });
                tabMode.addRow(new String[]{
                    "E-Mail",": "+email
                });
            }
            
            if(tabMode.getRowCount()==0){
                try{
                    headers = new HttpHeaders();
                    headers.setContentType(MediaType.APPLICATION_JSON);
                    headers.add("Authorization", "Bearer "+api.TokenSatuSehat());
                    requestEntity = new HttpEntity(headers);
                    System.out.println("Notifikasi : "+link+"/Patient/"+search);
                    json=api.getRest().exchange(link+"/Patient/"+search, HttpMethod.GET, requestEntity, String.class).getBody();
                    System.out.println("JSON : "+json);
                    root = mapper.readTree(json);
                    idpasien=search;
                    gender = root.path("gender").asText().toLowerCase().equals("male")?"Laki-laki":"Perempuan";
                    birthDate = root.path("birthDate").asText();
                    maritalStatus = root.path("maritalStatus").path("text").asText().toLowerCase().equals("married")?"Menikah":"Belum Menikah";
                    for(JsonNode listname:root.path("name")){
                        name=listname.path("text").asText();
                    }
                    for(JsonNode listtelecom:root.path("telecom")){
                        if(listtelecom.path("system").asText().equals("phone")){
                            phone=listtelecom.path("value").asText();
                        }
                        if(listtelecom.path("system").asText().equals("email")){
                            email=listtelecom.path("value").asText();
                        }
                    }
                    for(JsonNode listnoktp:root.path("identifier")){
                        if(listnoktp.path("system").asText().equals("https://fhir.kemkes.go.id/id/nik")){
                            noktp=listnoktp.path("value").asText();
                        }
                    }
                    for(JsonNode listaddress:root.path("address")){
                        line=listaddress.path("line").get(0).asText();
                        postalCode=listaddress.path("postalCode").asText();
                        for(JsonNode listextension:listaddress.path("extension")){
                            for(JsonNode listextensionextension:listextension.path("extension")){
                                if(listextensionextension.path("url").asText().equals("province")){
                                    province=listextensionextension.path("valueCode").asText();
                                }
                                if(listextensionextension.path("url").asText().equals("city")){
                                    city=listextensionextension.path("valueCode").asText();
                                }
                                if(listextensionextension.path("url").asText().equals("district")){
                                    district=listextensionextension.path("valueCode").asText();
                                }
                                if(listextensionextension.path("url").asText().equals("village")){
                                    village=listextensionextension.path("valueCode").asText();
                                }
                                if(listextensionextension.path("url").asText().equals("rt")){
                                    rt=listextensionextension.path("valueCode").asText();
                                }
                                if(listextensionextension.path("url").asText().equals("rw")){
                                    rw=listextensionextension.path("valueCode").asText();
                                }
                            }
                        }
                    }
                }catch(Exception e){
                    System.out.println("Notifikasi : "+e);
                }
                tabMode.addRow(new String[]{
                    "ID Pasien",": "+idpasien
                });
                tabMode.addRow(new String[]{
                    "Nomor KTP",": "+noktp
                });
                tabMode.addRow(new String[]{
                    "Nama",": "+name
                });
                tabMode.addRow(new String[]{
                    "Tanggal Lahir",": "+birthDate
                });
                tabMode.addRow(new String[]{
                    "Jenis Kelamin",": "+gender
                });
                tabMode.addRow(new String[]{
                    "Status Pernikahan",": "+maritalStatus
                });
                tabMode.addRow(new String[]{
                    "Alamat Rumah",": "+line
                });
                tabMode.addRow(new String[]{
                    "R.T.",": "+rt
                });
                tabMode.addRow(new String[]{
                    "R.W.",": "+rw
                });
                response = mapper.readTree(dataKelurahan).path("kelurahan");
                for(JsonNode listkelurahan:response){
                    if(listkelurahan.path("id").asText().toLowerCase().equals(village)&&listkelurahan.path("id_kecamatan").asText().equals(district)){
                        villagename=listkelurahan.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kelurahan",": "+village+" "+villagename
                });
                response = mapper.readTree(dataKecamatan).path("kecamatan");
                for(JsonNode listkcamatan:response){
                    if(listkcamatan.path("id").asText().toLowerCase().equals(district)&&listkcamatan.path("id_kabupaten").asText().equals(city)){
                        districtname=listkcamatan.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kecamatan",": "+district+" "+districtname
                });
                response = mapper.readTree(dataKabupaten).path("kabupaten");
                for(JsonNode listkabupaten:response){
                    if(listkabupaten.path("id").asText().toLowerCase().equals(city)&&listkabupaten.path("id_propinsi").asText().equals(province)){
                        cityname=listkabupaten.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Kabupaten",": "+city+" "+cityname
                });
                response = mapper.readTree(dataPropinsi).path("propinsi");
                for(JsonNode listpropinsi:response){
                    if(listpropinsi.path("id").asText().toLowerCase().equals(province)){
                        provincename=listpropinsi.path("nama").asText();
                    }
                }
                tabMode.addRow(new String[]{
                    "Propinsi",": "+province+" "+provincename
                });
                tabMode.addRow(new String[]{
                    "Kode P.O.S.",": "+postalCode
                });
                tabMode.addRow(new String[]{
                    "Nomor HP",": "+phone
                });
                tabMode.addRow(new String[]{
                    "E-Mail",": "+email
                });
                
            }
        }catch(Exception e){
            System.out.println("Notifikasi : "+e);
        }
        
        if(tabMode.getRowCount()==0){
            JOptionPane.showMessageDialog(null,"Maaf, Belum Ada data di Server Satu Sehat");
        }
    }

    public JTable getTable(){
        return tbKamar;
    }
}
